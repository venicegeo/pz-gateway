def THREADFIX_ID = env.THREADFIX_ID ? env.THREADFIX_ID : '115'

node {
  def mvn = tool 'M3'
  def root = pwd()

  def targetName = "piazza-gateway-1.0.0.jar"
  def artifactId = "pz-gateway"
  def packaging = "jar"
  def archiveName = "${artifactId}.${packaging}"


  stage('Setup') {
    deleteDir()
    if(env.GITLAB_CREDS) {                                                      
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  def appName = "${artifactId}-${appvers}"

  stage('Archive') {
    withEnv(["HOME=${WORKSPACE}"]) {
      sh """
        env
        ${mvn}/bin/mvn -X clean package -U -Dmaven.repo.local=${root}/.m2/repository
        cp target/${targetName} ${root}/${archiveName}
      """
    }

      sh """mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} \
        -DrepositoryId=nexus \
        -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
        -DgroupId="org.piazza" \
        -DgeneratePom=false \
        -Dpackaging=${packaging} \
        -Dmaven.repo.local="${root}/.m2/repository" \
        -DartifactId=${artifactId} \
        -Dversion=${appvers}
      """
  }

  stage('Scans') {
    withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIX_KEY']]) {
      sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --version"   
      sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --project '${artifactId}' --scan '.' --format 'XML' --enableExperimental --disableBundleAudit"
      //sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
    }
    
    // ionConnect
    def pomFile = "${root}/pom.xml"
    def ioncmd = "ion-connect"
    def jqcmd = "${env.JQ1_5_HOME}/jq"
    sh """
      resp=\$(${ioncmd} dependency resolve-dependencies-in-file --flatten --type maven ${pomfile})
      deps=\$(echo ${resp} | ${jqcmd} .dependencies)
      ${ioncmd} vulnerability get-vulnerabilities-for-list "${deps}"
    """


    sh """
      mkdir -p ${root}/.m2/repository
      ${mvn}/bin/mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install \
        -Dmaven.repo.local=${root}/.m2/repository \
        -Pcoverage-per-test org.jacoco:jacoco-maven-plugin:report \
        -DdataFile=target/jacoco.exec
    """

    // sonar
    sh """
      ${env.SONAR_HOME}/bin/sonar-scanner -Dsonar.jacoco.reportPath=target/jacoco.exec \
      -Dsonar.binaries=target/classes \
      -Dsonar.language=java \
      -Dsonar.links.scm=${env.GIT_URL} \
      -Dsonar.links.scm_dev=${env.GIT_URL}.git \
      -Dsonar.links.issue= \
      -Dsonar.links.homepage= \
      -Dsonar.links.ci=${env.JOB_URL} \
      -Dsonar.projectKey=venicegeo:piazza:${artifactId} \
      -Dsonar.projectName=venicegeo:piazza:${artifactId} \
      -Dsonar.projectBaseDir=${root} \
      -Dsonar.projectVersion=${appvers} \
      -Dsonar.redmine.url= \
      -Dsonar.redmine.api-access-key= \
      -Dsonar.redmine.project-key= \
      -Dsonar.sourceEncoding=utf-8 \
      -Dsonar.sources=src/main/java \
      -Dsonar.exclusions= \
      -Dsonar.tests=src/test/java
    """

  }

  stage('CI Deploy') {
    sh """
      cp target/${targetName} ${root}/${archiveName}
    """
    if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PCF_SPACE}"
        sh "cf push ${artifactId}-${appvers} --hostname ${artifactId}-${appvers} -f manifest.jenkins.yml -d ${env.PCF_DOMAIN} --no-start"   
        sh "cf set-env SPACE ${env.PCF_SPACE}"
        sh "cf set-env DOMAIN ${env.PCF_DOMAIN}"
        sh "cf start"

        def legacyAppName = sh(script: "cf routes | grep \"${artifactId} \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PCF_DOMAIN} --hostname ${artifactId}"
        def appExists = sh(script: "cf target ${legacyAppName}", returnStatus: true) == 0
        if (appExists) {
          // Delete old app. Do we have to unmap the routes?
            sh "cf delete ${legacyAppName} -f"
        }

      }
    }
    withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIX_KEY']]) {
      sh """${env.ZAPROXY_HOME}/zap.sh -cmd \
        -quickout ${root}/out/zap.xml \
        -quickurl https://${artifactId}-${appvers}.${env.PCF_DOMAIN} \
      """
      cat ${root}/out/zap.xml
      // Do we have to explicitly upload this to Threadfix or something?
    }
    // TODO: BG DEPLOY
  }

  stage('Integration Testing') {
    //postman()
  }

  stage('Reset') {
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  stage('Staging Deploy') {
    withEnv([
      'CF_HOME=.cf',
      'PCF_SPACE=stage',
      'PCF_DOMAIN=stage.geointservices.io'
    ]) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PCF_SPACE}"
        sh "cf push ${artifactId}-${appvers} --hostname ${artifactId}-${appvers} -f manifest.jenkins.yml -d ${env.PCF_DOMAIN} --no-start"   
        sh "cf set-env SPACE ${env.PCF_SPACE}"
        sh "cf set-env DOMAIN ${env.PCF_DOMAIN}"
        sh "cf start"

        def legacyAppName = sh(script: "cf routes | grep \"${artifactId} \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PCF_DOMAIN} --hostname ${artifactId}"
        def appExists = sh(script: "cf target ${legacyAppName}", returnStatus: true) == 0
        if (appExists) {
          // Delete old app. Do we have to unmap the routes?
            sh "cf delete ${legacyAppName} -f"
        }

      }
    }
    /*cfBgDeploy {
      cfDomain  = 'stage.geointservices.io'
      cfSpace   = 'stage'
    }*/
  }

  stage ('Stage: Integration Testing') {
    /*postman {
      cfSpace = 'stage'
    }*/
  }

  stage('Reset') {
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  stage('Final Scans') {
    sh """
      ${mvn}/bin/mvn install:install-file -Dmaven.repo.local=${root}/.m2/repository -Dfile=pom.xml -DpomFile=pom.xml
    """
    /* fortify */
    sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} src/main/java/{*.java,**/*.java}"
    sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
    //sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=$THREADFIX_KEY"
  }

  stage('Cleanup') {
    deleteDir()
  }
}
